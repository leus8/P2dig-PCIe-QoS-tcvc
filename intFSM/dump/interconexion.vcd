$date
	Wed Nov 11 00:31:36 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module testbench $end
$var wire 1 ! reset_L $end
$var wire 1 " init $end
$var wire 1 # idle_out_cond $end
$var wire 1 $ error_out_cond $end
$var wire 5 % error_full_cond [4:0] $end
$var wire 1 & clk $end
$var wire 1 ' active_out_cond $end
$var wire 32 ( UmbralesVCs_LOW [31:0] $end
$var wire 32 ) UmbralesVCs_HIGH [31:0] $end
$var wire 4 * UmbralesMFs_LOW [3:0] $end
$var wire 4 + UmbralesMFs_HIGH [3:0] $end
$var wire 8 , UmbralesDs_LOW [7:0] $end
$var wire 8 - UmbralesDs_HIGH [7:0] $end
$var wire 1 . Main_wr $end
$var wire 1 / Main_full $end
$var wire 6 0 Main_data_in [5:0] $end
$var wire 1 1 D1_rd $end
$var wire 1 2 D1_error_output $end
$var wire 1 3 D1_empty $end
$var wire 6 4 D1_data_out [5:0] $end
$var wire 1 5 D0_rd $end
$var wire 1 6 D0_error_output $end
$var wire 1 7 D0_empty $end
$var wire 6 8 D0_data_out [5:0] $end
$scope module md $end
$var wire 1 ! reset_L $end
$var wire 1 " init $end
$var wire 1 # idle_out_cond $end
$var wire 1 $ error_out_cond $end
$var wire 5 9 error_full_cond [4:0] $end
$var wire 1 & clk $end
$var wire 1 ' active_out_cond $end
$var wire 1 : VC1_error_output $end
$var wire 1 ; VC1_empty $end
$var wire 1 < VC0_error_output $end
$var wire 1 = VC0_empty $end
$var wire 32 > UmbralesVCs_LOW [31:0] $end
$var wire 32 ? UmbralesVCs_HIGH [31:0] $end
$var wire 4 @ UmbralesMFs_LOW [3:0] $end
$var wire 4 A UmbralesMFs_HIGH [3:0] $end
$var wire 8 B UmbralesDs_LOW [7:0] $end
$var wire 8 C UmbralesDs_HIGH [7:0] $end
$var wire 16 D UmbralV1_LOW_cond [15:0] $end
$var wire 16 E UmbralV1_HIGH_cond [15:0] $end
$var wire 16 F UmbralV0_LOW_cond [15:0] $end
$var wire 16 G UmbralV0_HIGH_cond [15:0] $end
$var wire 4 H UmbralMF_LOW_cond [3:0] $end
$var wire 4 I UmbralMF_HIGH_cond [3:0] $end
$var wire 4 J UmbralD1_LOW_cond [3:0] $end
$var wire 4 K UmbralD1_HIGH_cond [3:0] $end
$var wire 4 L UmbralD0_LOW_cond [3:0] $end
$var wire 4 M UmbralD0_HIGH_cond [3:0] $end
$var wire 1 . Main_wr $end
$var wire 1 / Main_full $end
$var wire 1 N Main_error_output $end
$var wire 1 O Main_empty $end
$var wire 6 P Main_data_in [5:0] $end
$var wire 5 Q FIFO_ERRORS [4:0] $end
$var wire 5 R FIFO_EMPTIES [4:0] $end
$var wire 1 1 D1_rd $end
$var wire 1 2 D1_error_output $end
$var wire 1 3 D1_empty $end
$var wire 6 S D1_data_out [5:0] $end
$var wire 1 5 D0_rd $end
$var wire 1 6 D0_error_output $end
$var wire 1 7 D0_empty $end
$var wire 6 T D0_data_out [5:0] $end
$scope module intern0 $end
$var wire 1 U vc0_delay $end
$var wire 1 V valid_in_vc1 $end
$var wire 1 W valid_in_vc0 $end
$var wire 1 ! reset_L $end
$var wire 1 X demux_vcid_valid_in $end
$var wire 6 Y demux_vcid_in [5:0] $end
$var wire 1 Z demux_dest_valid_in $end
$var wire 6 [ demux_dest_data_in [5:0] $end
$var wire 6 \ data_in_vc1 [5:0] $end
$var wire 6 ] data_in_vc0 [5:0] $end
$var wire 1 & clk $end
$var wire 1 ^ VC1_rd $end
$var wire 1 _ VC1_full $end
$var wire 1 : VC1_error_output $end
$var wire 1 ; VC1_empty $end
$var wire 6 ` VC1_data_out [5:0] $end
$var wire 1 a VC1_almost_full $end
$var wire 1 b VC1_almost_empty $end
$var wire 1 c VC0_rd $end
$var wire 1 d VC0_full $end
$var wire 1 < VC0_error_output $end
$var wire 1 = VC0_empty $end
$var wire 6 e VC0_data_out [5:0] $end
$var wire 1 f VC0_almost_full $end
$var wire 1 g VC0_almost_empty $end
$var wire 16 h UmbralV1_LOW_cond [15:0] $end
$var wire 16 i UmbralV1_HIGH_cond [15:0] $end
$var wire 16 j UmbralV0_LOW_cond [15:0] $end
$var wire 16 k UmbralV0_HIGH_cond [15:0] $end
$var wire 4 l UmbralMF_LOW_cond [3:0] $end
$var wire 4 m UmbralMF_HIGH_cond [3:0] $end
$var wire 4 n UmbralD1_LOW_cond [3:0] $end
$var wire 4 o UmbralD1_HIGH_cond [3:0] $end
$var wire 4 p UmbralD0_LOW_cond [3:0] $end
$var wire 4 q UmbralD0_HIGH_cond [3:0] $end
$var wire 1 . Main_wr $end
$var wire 1 r Main_rd $end
$var wire 1 / Main_full $end
$var wire 1 N Main_error_output $end
$var wire 1 O Main_empty $end
$var wire 6 s Main_data_out [5:0] $end
$var wire 6 t Main_data_in [5:0] $end
$var wire 1 u Main_almost_full $end
$var wire 1 v Main_almost_empty $end
$var wire 1 w D1_wr $end
$var wire 1 1 D1_rd $end
$var wire 1 x D1_full $end
$var wire 1 2 D1_error_output $end
$var wire 1 3 D1_empty $end
$var wire 6 y D1_data_out [5:0] $end
$var wire 6 z D1_data_in [5:0] $end
$var wire 1 { D1_almost_full $end
$var wire 1 | D1_almost_empty $end
$var wire 1 } D0_wr $end
$var wire 1 5 D0_rd $end
$var wire 1 ~ D0_full $end
$var wire 1 6 D0_error_output $end
$var wire 1 7 D0_empty $end
$var wire 6 !" D0_data_out [5:0] $end
$var wire 6 "" D0_data_in [5:0] $end
$var wire 1 #" D0_almost_full $end
$var wire 1 $" D0_almost_empty $end
$scope module d_dest $end
$var wire 1 %" selector $end
$var wire 1 ! reset_L $end
$var wire 1 Z demux_dest_valid_in $end
$var wire 6 &" demux_dest_data_in [5:0] $end
$var wire 1 & clk $end
$var reg 6 '" D0_data_in [5:0] $end
$var reg 1 } D0_wr $end
$var reg 6 (" D1_data_in [5:0] $end
$var reg 1 w D1_wr $end
$var reg 6 )" data_recordar0 [5:0] $end
$var reg 6 *" data_recordar1 [5:0] $end
$var reg 1 +" valid_recordar0 $end
$var reg 1 ," valid_recordar1 $end
$upscope $end
$scope module d_vcid $end
$var wire 1 -" selector $end
$var wire 1 ! reset_L $end
$var wire 1 X demux_vcid_valid_in $end
$var wire 6 ." demux_vcid_in [5:0] $end
$var wire 1 & clk $end
$var reg 6 /" data_in_vc0 [5:0] $end
$var reg 6 0" data_in_vc1 [5:0] $end
$var reg 6 1" data_recordar0 [5:0] $end
$var reg 6 2" data_recordar1 [5:0] $end
$var reg 1 W valid_in_vc0 $end
$var reg 1 V valid_in_vc1 $end
$var reg 1 3" valid_recordar0 $end
$var reg 1 4" valid_recordar1 $end
$upscope $end
$scope module f_d0 $end
$var wire 6 5" D0_data_in [5:0] $end
$var wire 1 } D0_wr $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 4 6" UmbralD0_LOW_cond [3:0] $end
$var wire 4 7" UmbralD0_HIGH_cond [3:0] $end
$var wire 1 5 D0_rd $end
$var wire 1 ~ D0_full $end
$var wire 1 6 D0_error_output $end
$var wire 1 7 D0_empty $end
$var wire 6 8" D0_data_out [5:0] $end
$var wire 1 #" D0_almost_full $end
$var wire 1 $" D0_almost_empty $end
$scope module D0 $end
$var wire 6 9" fifo_data_in [5:0] $end
$var wire 1 7 fifo_empty $end
$var wire 1 ~ fifo_full $end
$var wire 1 } fifo_wr $end
$var wire 4 :" umbral_bajo [3:0] $end
$var wire 4 ;" umbral_alto [3:0] $end
$var wire 1 ! reset_L $end
$var wire 4 <" nxtaddr [3:0] $end
$var wire 1 =" full $end
$var wire 1 5 fifo_rd $end
$var wire 1 #" fifo_almost_full $end
$var wire 1 $" fifo_almost_empty $end
$var wire 1 >" empty $end
$var wire 1 & clk $end
$var reg 1 6 error_output $end
$var reg 6 ?" fifo_data_out [5:0] $end
$var reg 4 @" o_fill [3:0] $end
$var reg 1 A" overrun $end
$var reg 4 B" rdaddr [3:0] $end
$var reg 1 C" underrun $end
$var reg 4 D" wraddr [3:0] $end
$upscope $end
$upscope $end
$scope module f_d1 $end
$var wire 6 E" D1_data_in [5:0] $end
$var wire 1 w D1_wr $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 4 F" UmbralD1_LOW_cond [3:0] $end
$var wire 4 G" UmbralD1_HIGH_cond [3:0] $end
$var wire 1 1 D1_rd $end
$var wire 1 x D1_full $end
$var wire 1 2 D1_error_output $end
$var wire 1 3 D1_empty $end
$var wire 6 H" D1_data_out [5:0] $end
$var wire 1 { D1_almost_full $end
$var wire 1 | D1_almost_empty $end
$scope module D1 $end
$var wire 6 I" fifo_data_in [5:0] $end
$var wire 1 3 fifo_empty $end
$var wire 1 x fifo_full $end
$var wire 1 w fifo_wr $end
$var wire 4 J" umbral_bajo [3:0] $end
$var wire 4 K" umbral_alto [3:0] $end
$var wire 1 ! reset_L $end
$var wire 4 L" nxtaddr [3:0] $end
$var wire 1 M" full $end
$var wire 1 1 fifo_rd $end
$var wire 1 { fifo_almost_full $end
$var wire 1 | fifo_almost_empty $end
$var wire 1 N" empty $end
$var wire 1 & clk $end
$var reg 1 2 error_output $end
$var reg 6 O" fifo_data_out [5:0] $end
$var reg 4 P" o_fill [3:0] $end
$var reg 1 Q" overrun $end
$var reg 4 R" rdaddr [3:0] $end
$var reg 1 S" underrun $end
$var reg 4 T" wraddr [3:0] $end
$upscope $end
$upscope $end
$scope module f_main $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 4 U" UmbralMF_LOW_cond [3:0] $end
$var wire 4 V" UmbralMF_HIGH_cond [3:0] $end
$var wire 1 . Main_wr $end
$var wire 1 r Main_rd $end
$var wire 1 / Main_full $end
$var wire 1 N Main_error_output $end
$var wire 1 O Main_empty $end
$var wire 6 W" Main_data_out [5:0] $end
$var wire 6 X" Main_data_in [5:0] $end
$var wire 1 u Main_almost_full $end
$var wire 1 v Main_almost_empty $end
$scope module Main $end
$var wire 1 O fifo_empty $end
$var wire 1 / fifo_full $end
$var wire 4 Y" umbral_bajo [3:0] $end
$var wire 4 Z" umbral_alto [3:0] $end
$var wire 1 ! reset_L $end
$var wire 4 [" nxtaddr [3:0] $end
$var wire 1 \" full $end
$var wire 1 . fifo_wr $end
$var wire 1 r fifo_rd $end
$var wire 6 ]" fifo_data_in [5:0] $end
$var wire 1 u fifo_almost_full $end
$var wire 1 v fifo_almost_empty $end
$var wire 1 ^" empty $end
$var wire 1 & clk $end
$var reg 1 N error_output $end
$var reg 6 _" fifo_data_out [5:0] $end
$var reg 4 `" o_fill [3:0] $end
$var reg 1 a" overrun $end
$var reg 4 b" rdaddr [3:0] $end
$var reg 1 c" underrun $end
$var reg 4 d" wraddr [3:0] $end
$upscope $end
$upscope $end
$scope module f_vc0 $end
$var wire 6 e" data_in_vc0 [5:0] $end
$var wire 1 W valid_in_vc0 $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 1 c VC0_rd $end
$var wire 1 d VC0_full $end
$var wire 1 < VC0_error_output $end
$var wire 1 = VC0_empty $end
$var wire 6 f" VC0_data_out [5:0] $end
$var wire 1 f VC0_almost_full $end
$var wire 1 g VC0_almost_empty $end
$var wire 16 g" UmbralV0_LOW_cond [15:0] $end
$var wire 16 h" UmbralV0_HIGH_cond [15:0] $end
$scope module VC0 $end
$var wire 6 i" fifo_data_in [5:0] $end
$var wire 1 = fifo_empty $end
$var wire 1 d fifo_full $end
$var wire 1 W fifo_wr $end
$var wire 16 j" umbral_bajo [15:0] $end
$var wire 16 k" umbral_alto [15:0] $end
$var wire 1 ! reset_L $end
$var wire 16 l" nxtaddr [15:0] $end
$var wire 1 m" full $end
$var wire 1 c fifo_rd $end
$var wire 1 f fifo_almost_full $end
$var wire 1 g fifo_almost_empty $end
$var wire 1 n" empty $end
$var wire 1 & clk $end
$var reg 1 < error_output $end
$var reg 6 o" fifo_data_out [5:0] $end
$var reg 16 p" o_fill [15:0] $end
$var reg 1 q" overrun $end
$var reg 16 r" rdaddr [15:0] $end
$var reg 1 s" underrun $end
$var reg 16 t" wraddr [15:0] $end
$upscope $end
$upscope $end
$scope module f_vc1 $end
$var wire 6 u" data_in_vc1 [5:0] $end
$var wire 1 V valid_in_vc1 $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 1 ^ VC1_rd $end
$var wire 1 _ VC1_full $end
$var wire 1 : VC1_error_output $end
$var wire 1 ; VC1_empty $end
$var wire 6 v" VC1_data_out [5:0] $end
$var wire 1 a VC1_almost_full $end
$var wire 1 b VC1_almost_empty $end
$var wire 16 w" UmbralV1_LOW_cond [15:0] $end
$var wire 16 x" UmbralV1_HIGH_cond [15:0] $end
$scope module VC1 $end
$var wire 6 y" fifo_data_in [5:0] $end
$var wire 1 ; fifo_empty $end
$var wire 1 _ fifo_full $end
$var wire 1 V fifo_wr $end
$var wire 16 z" umbral_bajo [15:0] $end
$var wire 16 {" umbral_alto [15:0] $end
$var wire 1 ! reset_L $end
$var wire 16 |" nxtaddr [15:0] $end
$var wire 1 }" full $end
$var wire 1 ^ fifo_rd $end
$var wire 1 a fifo_almost_full $end
$var wire 1 b fifo_almost_empty $end
$var wire 1 ~" empty $end
$var wire 1 & clk $end
$var reg 1 : error_output $end
$var reg 6 !# fifo_data_out [5:0] $end
$var reg 16 "# o_fill [15:0] $end
$var reg 1 ## overrun $end
$var reg 16 $# rdaddr [15:0] $end
$var reg 1 %# underrun $end
$var reg 16 &# wraddr [15:0] $end
$upscope $end
$upscope $end
$scope module mux1 $end
$var wire 6 '# VC0_data_out [5:0] $end
$var wire 6 (# VC1_data_out [5:0] $end
$var wire 1 U vc0_delay $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var wire 1 ^ VC1_rd $end
$var wire 1 c VC0_rd $end
$var reg 6 )# data_out_recordar [5:0] $end
$var reg 6 *# demux_dest_data_in [5:0] $end
$var reg 1 Z demux_dest_valid_in $end
$var reg 1 +# valid_in_recordar $end
$upscope $end
$scope module pop_main $end
$var wire 6 ,# Main_data_out [5:0] $end
$var wire 1 O Main_empty $end
$var wire 1 f VC0_almost_full $end
$var wire 1 a VC1_almost_full $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var reg 1 r Main_rd $end
$var reg 6 -# data_out_recordar [5:0] $end
$var reg 6 .# demux_vcid_in [5:0] $end
$var reg 1 X demux_vcid_valid_in $end
$var reg 1 /# demux_vcid_valid_in_recordar $end
$upscope $end
$scope module pop_vc0 $end
$var wire 1 ~ D0_full $end
$var wire 1 x D1_full $end
$var wire 1 = VC0_empty $end
$var wire 1 ; VC1_empty $end
$var wire 1 ! reset_L $end
$var wire 1 & clk $end
$var reg 1 c VC0_rd $end
$var reg 1 ^ VC1_rd $end
$var reg 1 0# and_d0d1 $end
$var reg 1 1# and_vc0_0 $end
$var reg 1 2# and_vc0_1 $end
$var reg 1 U vc0_delay $end
$upscope $end
$upscope $end
$scope module maquina $end
$var wire 5 3# FIFO_EMPTIES [4:0] $end
$var wire 5 4# FIFO_ERRORS [4:0] $end
$var wire 1 ! reset_L $end
$var wire 1 " init $end
$var wire 1 & clk $end
$var wire 32 5# UmbralesVCs_LOW [31:0] $end
$var wire 32 6# UmbralesVCs_HIGH [31:0] $end
$var wire 4 7# UmbralesMFs_LOW [3:0] $end
$var wire 4 8# UmbralesMFs_HIGH [3:0] $end
$var wire 8 9# UmbralesDs_LOW [7:0] $end
$var wire 8 :# UmbralesDs_HIGH [7:0] $end
$var reg 4 ;# UmbralD0_HIGH [3:0] $end
$var reg 4 <# UmbralD0_HIGH_cond [3:0] $end
$var reg 4 =# UmbralD0_LOW [3:0] $end
$var reg 4 ># UmbralD0_LOW_cond [3:0] $end
$var reg 4 ?# UmbralD1_HIGH [3:0] $end
$var reg 4 @# UmbralD1_HIGH_cond [3:0] $end
$var reg 4 A# UmbralD1_LOW [3:0] $end
$var reg 4 B# UmbralD1_LOW_cond [3:0] $end
$var reg 4 C# UmbralMF_HIGH [3:0] $end
$var reg 4 D# UmbralMF_HIGH_cond [3:0] $end
$var reg 4 E# UmbralMF_LOW [3:0] $end
$var reg 4 F# UmbralMF_LOW_cond [3:0] $end
$var reg 16 G# UmbralV0_HIGH [15:0] $end
$var reg 16 H# UmbralV0_HIGH_cond [15:0] $end
$var reg 16 I# UmbralV0_LOW [15:0] $end
$var reg 16 J# UmbralV0_LOW_cond [15:0] $end
$var reg 16 K# UmbralV1_HIGH [15:0] $end
$var reg 16 L# UmbralV1_HIGH_cond [15:0] $end
$var reg 16 M# UmbralV1_LOW [15:0] $end
$var reg 16 N# UmbralV1_LOW_cond [15:0] $end
$var reg 1 ' active_out_cond $end
$var reg 5 O# error_full_cond [4:0] $end
$var reg 1 $ error_out_cond $end
$var reg 3 P# estado [2:0] $end
$var reg 3 Q# estado_prox [2:0] $end
$var reg 1 # idle_out_cond $end
$upscope $end
$upscope $end
$scope module prb $end
$var wire 6 R# D0_data_out [5:0] $end
$var wire 1 7 D0_empty $end
$var wire 1 6 D0_error_output $end
$var wire 6 S# D1_data_out [5:0] $end
$var wire 1 3 D1_empty $end
$var wire 1 2 D1_error_output $end
$var wire 1 / Main_full $end
$var wire 1 ' active_out_cond $end
$var wire 5 T# error_full_cond [4:0] $end
$var wire 1 $ error_out_cond $end
$var wire 1 # idle_out_cond $end
$var reg 1 5 D0_rd $end
$var reg 1 1 D1_rd $end
$var reg 6 U# Main_data_in [5:0] $end
$var reg 1 . Main_wr $end
$var reg 8 V# UmbralesDs_HIGH [7:0] $end
$var reg 8 W# UmbralesDs_LOW [7:0] $end
$var reg 4 X# UmbralesMFs_HIGH [3:0] $end
$var reg 4 Y# UmbralesMFs_LOW [3:0] $end
$var reg 32 Z# UmbralesVCs_HIGH [31:0] $end
$var reg 32 [# UmbralesVCs_LOW [31:0] $end
$var reg 1 & clk $end
$var reg 1 " init $end
$var reg 1 ! reset_L $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 [#
b11111111111111111111111111111111 Z#
b1 Y#
b11 X#
b1 W#
b11111111 V#
b0 U#
b0 T#
b0 S#
b0 R#
bx Q#
bx P#
b0 O#
b0 N#
b1 M#
b0 L#
b1111111111111111 K#
b0 J#
b0 I#
b0 H#
b1111111111111111 G#
b0 F#
b1 E#
b0 D#
b11 C#
b0 B#
b1 A#
b0 @#
b1111 ?#
b0 >#
b0 =#
b0 <#
b1111 ;#
b11111111 :#
b1 9#
b11 8#
b1 7#
b11111111111111111111111111111111 6#
b1 5#
bx 4#
bx 3#
x2#
x1#
x0#
x/#
bx .#
bx -#
bx ,#
x+#
bx *#
bx )#
bx (#
bx '#
bx &#
x%#
bx $#
x##
bx "#
bx !#
x~"
x}"
bx |"
b0 {"
b0 z"
bx y"
b0 x"
b0 w"
bx v"
bx u"
bx t"
xs"
bx r"
xq"
bx p"
bx o"
xn"
xm"
bx l"
b0 k"
b0 j"
bx i"
b0 h"
b0 g"
bx f"
bx e"
bx d"
xc"
bx b"
xa"
bx `"
bx _"
x^"
b0 ]"
x\"
bx ["
b0 Z"
b0 Y"
b0 X"
bx W"
b0 V"
b0 U"
bx T"
xS"
bx R"
xQ"
bx P"
b0 O"
xN"
xM"
bx L"
b0 K"
b0 J"
bx I"
b0 H"
b0 G"
b0 F"
bx E"
bx D"
xC"
bx B"
xA"
bx @"
b0 ?"
x>"
x="
bx <"
b0 ;"
b0 :"
bx 9"
b0 8"
b0 7"
b0 6"
bx 5"
x4"
x3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
x-"
x,"
x+"
bx *"
bx )"
bx ("
bx '"
bx &"
x%"
x$"
x#"
bx ""
b0 !"
x~
x}
x|
x{
bx z
b0 y
xx
xw
xv
xu
b0 t
bx s
xr
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
xg
xf
bx e
xd
xc
xb
xa
bx `
x_
x^
bx ]
bx \
bx [
xZ
bx Y
xX
xW
xV
xU
b0 T
b0 S
bx R
bx Q
b0 P
xO
xN
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b11111111 C
b1 B
b11 A
b1 @
b11111111111111111111111111111111 ?
b1 >
x=
x<
x;
x:
b0 9
b0 8
x7
x6
05
b0 4
x3
x2
01
b0 0
x/
0.
b11111111 -
b1 ,
b11 +
b1 *
b11111111111111111111111111111111 )
b1 (
0'
0&
b0 %
0$
0#
0"
0!
$end
#80
b0 )#
0+#
0^
0c
0U
0N
b0 s
b0 W"
b0 _"
b0 ,#
0-"
04"
03"
b0 2"
b0 1"
0<
b0 e
b0 f"
b0 o"
b0 '#
01#
0:
b0 `
b0 v"
b0 !#
b0 (#
02#
0r
0/#
b0 -#
0%"
0,"
0+"
b0 *"
b0 )"
06
b0 Q
b0 4#
02
00#
1.
b0 J
b0 n
b0 F"
b0 J"
b0 B#
b0 K
b0 o
b0 G"
b0 K"
b0 @#
b0 M
b0 q
b0 7"
b0 ;"
b0 <#
b0 D
b0 h
b0 w"
b0 z"
b0 N#
b0 E
b0 i
b0 x"
b0 {"
b0 L#
b0 G
b0 k
b0 h"
b0 k"
b0 H#
b0 H
b0 l
b0 U"
b0 Y"
b0 F#
b0 I
b0 m
b0 V"
b0 Z"
b0 D#
b1 Q#
0a"
b1 ["
b0 d"
0c"
b0 b"
0/
0\"
1O
1^"
1v
1u
b0 `"
0X
b0 Y
b0 ."
b0 .#
0V
0W
b0 \
b0 0"
b0 u"
b0 y"
b0 ]
b0 /"
b0 e"
b0 i"
0q"
b1 l"
b0 t"
0s"
b0 r"
0d
0m"
1=
1n"
1g
1f
b0 p"
0##
b1 |"
b0 &#
0%#
b0 $#
0_
0}"
1;
1~"
1b
1a
b0 "#
0Z
b0 [
b0 &"
b0 *#
0w
0}
b0 z
b0 ("
b0 E"
b0 I"
b0 ""
b0 '"
b0 5"
b0 9"
0A"
b1 <"
b0 D"
0C"
b0 B"
0~
0="
17
1>"
1$"
1#"
b0 @"
0Q"
b1 L"
b0 T"
0S"
b0 R"
0x
0M"
b11111 R
b11111 3#
13
1N"
1|
1{
b0 P"
b0 P#
b101 0
b101 P
b101 t
b101 X"
b101 ]"
b101 U#
1!
1"
1&
#160
0&
#240
b101 -#
b101 s
b101 W"
b101 _"
b101 ,#
1r
1/#
0|
b1 J
b1 n
b1 F"
b1 J"
b1 B#
0{
b1111 K
b1111 o
b1111 G"
b1111 K"
b1111 @#
0#"
b1111 M
b1111 q
b1111 7"
b1111 ;"
b1111 <#
0b
b1 D
b1 h
b1 w"
b1 z"
b1 N#
0a
b1111111111111111 E
b1111111111111111 i
b1111111111111111 x"
b1111111111111111 {"
b1111111111111111 L#
0f
b1111111111111111 G
b1111111111111111 k
b1111111111111111 h"
b1111111111111111 k"
b1111111111111111 H#
b1 H
b1 l
b1 U"
b1 Y"
b1 F#
b11 I
b11 m
b11 V"
b11 Z"
b11 D#
b10111 0
b10111 P
b10111 t
b10111 X"
b10111 ]"
b10111 U#
b1 P#
b11110 R
b11110 3#
0O
0^"
1v
0u
b1 `"
b10 ["
b1 d"
1&
#320
0&
#400
b10111 -#
b10111 s
b10111 W"
b10111 _"
b10111 ,#
13"
b101 1"
b11 ["
b10 d"
b1 b"
1X
b101 Y
b101 ."
b101 .#
b11100 0
b11100 P
b11100 t
b11100 X"
b11100 ]"
b11100 U#
1&
#480
0&
#560
b11100 -#
b10111 1"
b11100 s
b11100 W"
b11100 _"
b11100 ,#
b1 0
b1 P
b1 t
b1 X"
b1 ]"
b1 U#
1W
b101 ]
b101 /"
b101 e"
b101 i"
b10111 Y
b10111 ."
b10111 .#
b10 b"
b100 ["
b11 d"
1&
#640
0&
#720
b101 )#
b101 e
b101 f"
b101 o"
b101 '#
1+#
b1 -#
1c
b1 s
b1 W"
b1 _"
b1 ,#
b11100 1"
11#
b1 ["
b0 d"
b11 b"
b11100 Y
b11100 ."
b11100 .#
b10111 ]
b10111 /"
b10111 e"
b10111 i"
b10 l"
b1 t"
b11100 R
b11100 3#
0=
0n"
0g
b1 p"
b100110 0
b100110 P
b100110 t
b100110 X"
b100110 ]"
b100110 U#
1&
#800
0&
#880
b10111 )#
b100110 -#
1+"
b101 )"
b10111 e
b10111 f"
b10111 o"
b10111 '#
b1 1"
b100110 s
b100110 W"
b100110 _"
b100110 ,#
b10100 0
b10100 P
b10100 t
b10100 X"
b10100 ]"
b10100 U#
b101 [
b101 &"
b101 *#
1Z
b1 r"
b11 l"
b10 t"
b11100 ]
b11100 /"
b11100 e"
b11100 i"
b1 Y
b1 ."
b1 .#
b0 b"
b10 ["
b1 d"
1&
#960
0&
#1040
b10100 -#
14"
03"
b100110 2"
b11100 )#
1,"
0+"
b10111 *"
b10100 s
b10100 W"
b10100 _"
b10100 ,#
1-"
b0 1"
b11100 e
b11100 f"
b11100 o"
b11100 '#
1%"
b0 )"
b11 ["
b10 d"
b1 b"
b100110 Y
b100110 ."
b100110 .#
b1 ]
b1 /"
b1 e"
b1 i"
b100 l"
b11 t"
b10 r"
b10111 [
b10111 &"
b10111 *#
1}
b101 ""
b101 '"
b101 5"
b101 9"
b101000 0
b101000 P
b101000 t
b101000 X"
b101000 ]"
b101000 U#
1&
#1120
0&
#1200
b101 8
b101 T
b101 !"
b101 8"
b101 ?"
b101 R#
b1 )#
04"
13"
b10100 1"
b101000 -#
15
b11100 *"
b1 e
b1 f"
b1 o"
b1 '#
0-"
b0 2"
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b10100 R
b10100 3#
07
0>"
0$"
b1 @"
b10 <"
b1 D"
0}
1w
b10111 z
b10111 ("
b10111 E"
b10111 I"
b11100 [
b11100 &"
b11100 *#
b11 r"
b101 l"
b100 t"
0W
1V
b100110 \
b100110 0"
b100110 u"
b100110 y"
b10100 Y
b10100 ."
b10100 .#
b10 b"
b100 ["
b11 d"
1&
#1280
0&
#1360
b100110 `
b100110 v"
b100110 !#
b100110 (#
14"
03"
b101000 2"
b100110 )#
1^
0c
1U
0,"
1+"
b1 )"
b101000 s
b101000 W"
b101000 _"
b101000 ,#
1-"
b0 1"
b0 e
b0 f"
b0 o"
b0 '#
01#
12#
0%"
b0 *"
b0 8
b0 T
b0 !"
b0 8"
b0 ?"
b0 R#
05
b10111 4
b10111 S
b10111 y
b10111 H"
b10111 O"
b10111 S#
11
b1 ["
b0 d"
b11 b"
b101000 Y
b101000 ."
b101000 .#
0V
1W
b10100 ]
b10100 /"
b10100 e"
b10100 i"
b100 r"
1=
1n"
1g
b0 p"
b10 |"
b1 &#
0;
0~"
1b
b1 "#
b1 [
b1 &"
b1 *#
b11100 z
b11100 ("
b11100 E"
b11100 I"
b1 B"
17
1>"
1$"
b0 @"
b10 L"
b1 T"
b1010 R
b1010 3#
03
0N"
1|
b1 P"
1&
#1440
0&
#1520
b10100 e
b10100 f"
b10100 o"
b10100 '#
b10100 )#
0^
1c
0U
b11100 4
b11100 S
b11100 y
b11100 H"
b11100 O"
b11100 S#
b100110 )"
b0 `
b0 v"
b0 !#
b0 (#
02#
11#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b1 R"
b11 L"
b10 T"
0w
1}
b1 ""
b1 '"
b1 5"
b1 9"
b100110 [
b100110 &"
b100110 *#
1;
1~"
0b
b0 "#
b1 $#
b1100 R
b1100 3#
0=
0n"
0g
b1 p"
b110 l"
b101 t"
0W
1V
b101000 \
b101000 0"
b101000 u"
b101000 y"
b0 b"
b10 ["
b1 d"
1&
#1600
0&
#1680
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 )#
1^
0c
1U
1,"
0+"
b10100 *"
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b0 e
b0 f"
b0 o"
b0 '#
01#
12#
1%"
b0 )"
b1 8
b1 T
b1 !"
b1 8"
b1 ?"
b1 R#
15
b0 4
b0 S
b0 y
b0 H"
b0 O"
b0 S#
01
b11 ["
b10 d"
b1 b"
b101 r"
1=
1n"
1g
b0 p"
b11 |"
b10 &#
0;
0~"
1b
b1 "#
b10100 [
b10100 &"
b10100 *#
b100110 ""
b100110 '"
b100110 5"
b100110 9"
b11 <"
b10 D"
07
0>"
0$"
b1 @"
b10 R"
b10010 R
b10010 3#
13
1N"
0|
b0 P"
1&
#1760
0&
#1840
0,"
1+"
b101000 )"
b100110 8
b100110 T
b100110 !"
b100110 8"
b100110 ?"
b100110 R#
0%"
b0 *"
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b10 B"
b100 <"
b11 D"
0}
1w
b10100 z
b10100 ("
b10100 E"
b10100 I"
b101000 [
b101000 &"
b101000 *#
b10 $#
b100 |"
b11 &#
b10 b"
b100 ["
b11 d"
1&
#1920
0&
#2000
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b0 8
b0 T
b0 !"
b0 8"
b0 ?"
b0 R#
05
b10100 4
b10100 S
b10100 y
b10100 H"
b10100 O"
b10100 S#
11
b1 ["
b0 d"
b11 b"
b101 |"
b100 &#
b11 $#
0w
1}
b101000 ""
b101000 '"
b101000 5"
b101000 9"
b11 B"
17
1>"
1$"
b0 @"
b100 L"
b11 T"
b1010 R
b1010 3#
03
0N"
1|
b1 P"
1&
#2080
0&
#2160
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
01
b0 4
b0 S
b0 y
b0 H"
b0 O"
b0 S#
15
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
13
1N"
0|
b0 P"
b11 R"
b10010 R
b10010 3#
07
0>"
0$"
b1 @"
b1 <"
b0 D"
b100 $#
b110 |"
b101 &#
b0 b"
b10 ["
b1 d"
1&
#2240
0&
#2320
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b11 ["
b10 d"
b1 b"
b111 |"
b110 &#
b101 $#
b10 <"
b1 D"
b0 B"
1&
#2400
0&
#2480
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b1 B"
b11 <"
b10 D"
b110 $#
b1000 |"
b111 &#
b10 b"
b100 ["
b11 d"
1&
#2560
0&
#2640
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b1 ["
b0 d"
b11 b"
b1001 |"
b1000 &#
b111 $#
b100 <"
b11 D"
b10 B"
1&
#2720
0&
#2800
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b11 B"
b1 <"
b0 D"
b1000 $#
b1010 |"
b1001 &#
b0 b"
b10 ["
b1 d"
1&
#2880
0&
#2960
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b11 ["
b10 d"
b1 b"
b1011 |"
b1010 &#
b1001 $#
b10 <"
b1 D"
b0 B"
1&
#3040
0&
#3120
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b1 B"
b11 <"
b10 D"
b1010 $#
b1100 |"
b1011 &#
b10 b"
b100 ["
b11 d"
1&
#3200
0&
#3280
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b1 ["
b0 d"
b11 b"
b1101 |"
b1100 &#
b1011 $#
b100 <"
b11 D"
b10 B"
1&
#3360
0&
#3440
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b11 B"
b1 <"
b0 D"
b1100 $#
b1110 |"
b1101 &#
b0 b"
b10 ["
b1 d"
1&
#3520
0&
#3600
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b11 ["
b10 d"
b1 b"
b1111 |"
b1110 &#
b1101 $#
b10 <"
b1 D"
b0 B"
1&
#3680
0&
#3760
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b1 B"
b11 <"
b10 D"
b1110 $#
b10000 |"
b1111 &#
b10 b"
b100 ["
b11 d"
1&
#3840
0&
#3920
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b1 ["
b0 d"
b11 b"
b1 |"
b0 &#
b1111 $#
b100 <"
b11 D"
b10 B"
1&
#4000
0&
#4080
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b11 B"
b1 <"
b0 D"
b0 $#
b10 |"
b1 &#
b0 b"
b10 ["
b1 d"
1&
#4160
0&
#4240
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b11 ["
b10 d"
b1 b"
b11 |"
b10 &#
b1 $#
b10 <"
b1 D"
b0 B"
1&
#4320
0&
#4400
b101000 8
b101000 T
b101000 !"
b101000 8"
b101000 ?"
b101000 R#
b101000 `
b101000 v"
b101000 !#
b101000 (#
b101000 s
b101000 W"
b101000 _"
b101000 ,#
b1 B"
b11 <"
b10 D"
b10 $#
b100 |"
b11 &#
b10 b"
b100 ["
b11 d"
1&
