$date
	Wed Nov  4 14:58:50 2020
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module BUF $end
$var wire 1 ! A $end
$var wire 1 " Y $end
$upscope $end
$scope module DFFSR $end
$var wire 1 # C $end
$var wire 1 $ D $end
$var wire 1 % R $end
$var wire 1 & S $end
$var reg 1 ' Q $end
$upscope $end
$scope module testbench $end
$var wire 1 ( vc1_read_estr $end
$var wire 1 ) vc1_read $end
$var wire 1 * vc1_empty_estr $end
$var wire 1 + vc1_empty $end
$var wire 1 , vc0_read_estr $end
$var wire 1 - vc0_read $end
$var wire 1 . vc0_empty_estr $end
$var wire 1 / vc0_empty $end
$var wire 1 0 vc0_delay_estr $end
$var wire 1 1 vc0_delay $end
$var wire 1 2 reset_L $end
$var wire 1 3 d1_full_estr $end
$var wire 1 4 d1_full $end
$var wire 1 5 d0_full_estr $end
$var wire 1 6 d0_full $end
$var wire 1 7 clk $end
$scope module pop_vc0 $end
$var wire 1 + vc1_empty $end
$var wire 1 / vc0_empty $end
$var wire 1 2 reset_L $end
$var wire 1 4 d1_full $end
$var wire 1 6 d0_full $end
$var wire 1 7 clk $end
$var reg 1 8 and_d0d1 $end
$var reg 1 9 and_vc0_0 $end
$var reg 1 : and_vc0_1 $end
$var reg 1 1 vc0_delay $end
$var reg 1 ; vc0_delay_recordar $end
$var reg 1 - vc0_read $end
$var reg 1 < vc0_read_recordar $end
$var reg 1 ) vc1_read $end
$var reg 1 = vc1_read_recordar $end
$upscope $end
$scope module pop_vc0_estr $end
$var wire 1 ( vc1_read $end
$var wire 1 * vc1_empty $end
$var wire 1 , vc0_read $end
$var wire 1 . vc0_empty $end
$var wire 1 0 vc0_delay $end
$var wire 1 2 reset_L $end
$var wire 1 3 d1_full $end
$var wire 1 5 d0_full $end
$var wire 1 7 clk $end
$var wire 1 > _05_ $end
$var wire 1 ? _04_ $end
$var wire 1 @ _03_ $end
$var wire 1 A _02_ $end
$var wire 1 B _01_ $end
$var wire 1 C _00_ $end
$scope module _06_ $end
$var wire 1 ? Y $end
$var wire 1 5 B $end
$var wire 1 3 A $end
$upscope $end
$scope module _07_ $end
$var wire 1 ? A $end
$var wire 1 > Y $end
$var wire 1 2 B $end
$upscope $end
$scope module _08_ $end
$var wire 1 > A $end
$var wire 1 B Y $end
$var wire 1 . B $end
$upscope $end
$scope module _09_ $end
$var wire 1 A Y $end
$var wire 1 * A $end
$upscope $end
$scope module _10_ $end
$var wire 1 A B $end
$var wire 1 @ Y $end
$var wire 1 . A $end
$upscope $end
$scope module _11_ $end
$var wire 1 @ A $end
$var wire 1 > B $end
$var wire 1 C Y $end
$upscope $end
$scope module _12_ $end
$var wire 1 C D $end
$var wire 1 7 C $end
$var reg 1 0 Q $end
$upscope $end
$scope module _13_ $end
$var wire 1 B D $end
$var wire 1 7 C $end
$var reg 1 , Q $end
$upscope $end
$upscope $end
$scope module prb $end
$var reg 1 7 clk $end
$var reg 1 6 d0_full $end
$var reg 1 5 d0_full_estr $end
$var reg 1 4 d1_full $end
$var reg 1 3 d1_full_estr $end
$var reg 1 2 reset_L $end
$var reg 1 / vc0_empty $end
$var reg 1 . vc0_empty_estr $end
$var reg 1 + vc1_empty $end
$var reg 1 * vc1_empty_estr $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
1@
1?
1>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
x1
x0
1/
1.
x-
x,
1+
1*
x)
x(
x'
z&
z%
z$
z#
z"
z!
$end
#20
1B
1<
0>
1A
19
0)
0-
01
0(
00
0,
0*
0.
0+
0/
12
17
#40
07
#60
0B
1>
0<
0?
09
18
13
15
14
16
1,
1-
17
#80
07
#100
0>
1@
1?
0A
08
0-
0,
1*
1.
03
05
1+
1/
04
06
17
#120
07
#140
1>
0?
18
13
15
14
16
17
#160
07
#180
1B
0>
1?
1<
1A
19
08
0*
0.
03
05
0+
0/
04
06
17
#200
07
#220
1C
0@
0B
1=
0<
1;
1:
09
1.
1/
1,
1-
17
#240
07
#260
1)
0-
11
1(
10
0,
17
#280
07
#300
17
